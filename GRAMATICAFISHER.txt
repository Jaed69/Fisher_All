grammar EmployeeEval;

// Reglas del Parser
program      : (declaration | function)+ EOF;
declaration  : TYPE ID '=' expr ';' ;
function     : FUNC TYPE ID '(' paramList? ')' block ;
paramList    : param (',' param)* ;
param        : TYPE ID ;
block        : '{' statement* '}' ;
statement    : expr ';'
             | declaration
             | COMMENT ;
expr         : ID                                // Variable
             | NUMBER                            // Número constante
             | STRING                            // Cadena
             | expr '+' expr                     // Suma
             | expr '-' expr                     // Resta
             | expr '*' expr                     // Multiplicación
             | expr '/' expr                     // División
             | 'mean' '(' expr (',' expr)* ')'    // Media
             | 'variance' '(' expr (',' expr)* ')' // Varianza
             | 'stddev' '(' expr (',' expr)* ')'   // Desviación estándar
             | 'fisher' '(' expr (',' expr)* ')'   // Coeficiente de Fisher
             ;


TYPE         : 'int' | 'float' | 'string' ;     // Tipos de datos
FUNC         : 'func' ;                         // Definición de funciones
ID           : [a-zA-Z_][a-zA-Z_0-9]* ;         // Identificadores (variables y funciones)
NUMBER       : [0-9]+ ('.' [0-9]+)? ;           // Números (enteros o decimales)
STRING       : '"' .*? '"' ;                    // Cadenas de texto
WS          : [ \\t\\r\\n]+ -> skip ;
COMMENT : \'//\' ~[\\r\\n]* -> skip ;